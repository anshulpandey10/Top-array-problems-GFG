Given an array having both positive and negative integers. The task is to compute the length of the largest subarray with sum 0.

Example 1:

Input:
N = 8
A[] = {15,-2,2,-8,1,7,10,23}
Output: 5
Explanation: The largest subarray with
sum 0 will be -2 2 -8 1 7.

Solution:
 int maxLen(vector<int>&A, int n)
    {   
        // Your code here
        int z=0;
         for(int i=0;i<n;i++)
         {
             z+=A[i];
         }
         if(z==0)
         return n;
         
         int maxi=0;
         unordered_map<int,int>umap;
         int sum=0;
         
         
         for(int i=0;i<n;i++)
         {
            sum+=A[i];
            if(sum==0)
            maxi=i+1;
            if(umap.find(sum)!=umap.end())
             {
                 auto temp=umap.find(sum);
                 int a=i-temp->second;
                 maxi=max(maxi,a);
             }
            if(umap.find(sum)==umap.end())
            umap.insert({sum,i});
              
         }
         return maxi;
    }
